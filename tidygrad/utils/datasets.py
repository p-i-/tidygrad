# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/11_utils.datasets.ipynb.

# %% auto 0
__all__ = ['MNIST', 'mnist_batch_tfm']

# %% ../../nbs/11_utils.datasets.ipynb 1
import os
import requests
import numpy as np

from .data import Dataset, download_file, DataLoader

# %% ../../nbs/11_utils.datasets.ipynb 2
from .data import download_file
from pathlib import Path

# | export


class MNIST(Dataset):
    """MNIST Dataset"""

    def __init__(
        self,
        path="datasets",
        url=None,
        train=True,
        item_tfms=(),
    ):
        self.item_tfms = item_tfms
        self.path = Path(path)
        self.train = train
        self.url = (
            url
            if url is not None
            else "https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz"
        )
        self.load_data()

    def load_data(self):
        file_path = self.path / "mnist.npz"
        download_file(
            "https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz",
            file_path,
        )
        with np.load(file_path) as f:
            self.x = f["x_train"] if self.train else f["x_test"]
            self.y = f["y_train"] if self.train else f["y_test"]

            self.x = self.x.astype(np.float32)
            self.y = self.y.astype(np.int32)

    def __getitem__(self, idx):
        if not isinstance(idx, int):
            raise TypeError("Index must be an integer.")

        x, y = self.x[idx], self.y[idx]
        for tfm in self.item_tfms:
            x, y = tfm(x, y)
        return x, y

    def __len__(self):
        return len(self.x)

    def shuffle(self):
        idx = np.random.permutation(len(self))
        self.x, self.y = self.x[idx], self.y[idx]

    def collate_fn(self, batch: list):
        return np.stack([item[0] for item in batch]), np.stack(
            [item[1] for item in batch]
        )

# %% ../../nbs/11_utils.datasets.ipynb 3
def mnist_batch_tfm(x, y):
    return (x.reshape(x.shape[0], -1) / 255 - 0.5, y)
